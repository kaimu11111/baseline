```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Fused kernel: naive 2D convolution + conv bias + ReLU + external bias
cuda_source = r'''
#include <torch/extension.h>
#include <cuda_runtime.h>
#include <cmath>

__global__ void fused_conv_bias_relu_kernel(
    const float* input,
    const float* weight,
    const float* conv_bias,
    const float* external_bias,
    float* output,
    int N, int inC,
    int H, int W,
    int outC,
    int kernel_size,
    int outH,
    int outW)
{
    int n = blockIdx.x;
    int oc = blockIdx.y;
    int idx = blockIdx.z * blockDim.x + threadIdx.x;
    if (idx < outH * outW) {
        int h_out = idx / outW;
        int w_out = idx % outW;
        float val = 0.0f;

        // Naive convolution
        for(int ic = 0; ic < inC; ic++) {
            for(int kh = 0; kh < kernel_size; kh++) {
                for(int kw = 0; kw < kernel_size; kw++) {
                    int h_in = h_out + kh;
                    int w_in = w_out + kw;
                    float inp_val = input[n*inC*H*W + ic*H*W + h_in*W + w_in];
                    float wgt_val = weight[oc*inC*kernel_size*kernel_size 
                                           + ic*kernel_size*kernel_size
                                           + kh*kernel_size + kw];
                    val += inp_val * wgt_val;
                }
            }
        }
        // Add conv bias, apply ReLU
        val += conv_bias[oc];
        val = fmaxf(val, 0.0f);

        // Add external bias
        val += external_bias[oc];

        // Store result
        output[n*outC*outH*outW + oc*outH*outW + h_out*outW + w_out] = val;
    }
}

torch::Tensor fused_conv_bias_relu(
    torch::Tensor input,
    torch::Tensor weight,
    torch::Tensor conv_bias,
    torch::Tensor external_bias)
{
    int N = input.size(0);
    int inC = input.size(1);
    int H = input.size(2);
    int W = input.size(3);

    int outC = weight.size(0);
    int kernel_size = weight.size(2);

    // For default stride=1, padding=0
    int outH = H - kernel_size + 1;
    int outW = W - kernel_size + 1;

    auto options = torch::TensorOptions().dtype(input.dtype()).device(input.device());
    auto output = torch::zeros({N, outC, outH, outW}, options);

    const int block_size = 256;
    const int gridZ = (outH * outW + block_size - 1) / block_size;

    dim3 gridDim(N, outC, gridZ);
    dim3 blockDim(block_size);

    fused_conv_bias_relu_kernel<<<gridDim, blockDim>>>(
        input.data_ptr<float>(),
        weight.data_ptr<float>(),
        conv_bias.data_ptr<float>(),
        external_bias.data_ptr<float>(),
        output.data_ptr<float>(),
        N, inC, H, W, outC, kernel_size, outH, outW
    );

    return output;
}
'''

cpp_source = r'''
torch::Tensor fused_conv_bias_relu(
    torch::Tensor input,
    torch::Tensor weight,
    torch::Tensor conv_bias,
    torch::Tensor external_bias);
'''

# Build the inline extension
fused_conv_bias_relu_ext = load_inline(
    name="fused_conv_bias_relu_ext",
    cpp_sources=cpp_source,
    cuda_sources=cuda_source,
    functions=["fused_conv_bias_relu"],
    verbose=False,
)

class ModelNew(nn.Module):
    """
    Optimized model that fuses the convolution, conv bias, ReLU, and post-bias operations
    into a single custom CUDA kernel.
    """
    def __init__(self, in_channels, out_channels, kernel_size, bias_shape):
        super(ModelNew, self).__init__()
        # We still keep a Conv2d to hold weight/bias parameters, but won't use its forward().
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        # Additional bias as in original
        self.bias = nn.Parameter(torch.randn(bias_shape))

    def forward(self, x):
        return fused_conv_bias_relu_ext.fused_conv_bias_relu(
            x,
            self.conv.weight,
            self.conv.bias,
            self.bias
        )

batch_size = 64
in_channels  = 64
out_channels = 128
height = width = 128
kernel_size = 3
bias_shape = (out_channels, 1, 1)

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width).cuda()]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, bias_shape]
```