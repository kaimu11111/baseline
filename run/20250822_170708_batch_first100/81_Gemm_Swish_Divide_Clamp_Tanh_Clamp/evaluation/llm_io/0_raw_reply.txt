```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Custom CUDA kernel source
source = r"""
#include <torch/extension.h>
#include <cuda.h>
#include <cuda_runtime.h>

__global__ void fused_activation_kernel(const float* __restrict__ x, float* __restrict__ out, int size) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        float val = x[idx];
        // Swish
        float sigmoid_val = 1.0f / (1.0f + expf(-val));
        val = val * sigmoid_val;
        // Divide by 2
        val *= 0.5f;
        // Clamp -1 to 1
        val = fmaxf(-1.0f, fminf(1.0f, val));
        // Tanh
        val = tanhf(val);
        // Clamp -1 to 1 again
        val = fmaxf(-1.0f, fminf(1.0f, val));
        out[idx] = val;
    }
}

torch::Tensor fused_activation_cuda(torch::Tensor x) {
    auto out = torch::zeros_like(x);
    int size = x.numel();

    const int blockSize = 256;
    const int gridSize = (size + blockSize - 1) / blockSize;

    fused_activation_kernel<<<gridSize, blockSize>>>(x.data_ptr<float>(), out.data_ptr<float>(), size);

    return out;
}
"""

# Corresponding C++ function declaration
cpp_src = r"""
torch::Tensor fused_activation_cuda(torch::Tensor x);
"""

# Build and load the custom CUDA extension
fused_extension = load_inline(
    name="fused_extension",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["fused_activation_cuda"],
    verbose=False
)

# Optimized model
class ModelNew(nn.Module):
    def __init__(self, in_features, out_features, bias=True):
        super(ModelNew, self).__init__()
        self.gemm = nn.Linear(in_features, out_features, bias=bias)
        self.fused = fused_extension

    def forward(self, x):
        x = self.gemm(x)
        # Apply fused swish, divide, clamp, tanh, clamp
        x = self.fused.fused_activation_cuda(x)
        return x
```