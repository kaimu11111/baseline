```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Single fused kernel that multiplies by scale1, applies 3D avg pooling with kernel=2 (stride=2),
# adds bias, and multiplies by scale2
source = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void fused_ops_kernel(
    const float* __restrict__ input,
    const float* __restrict__ bias,
    float scale1, float scale2,
    float* __restrict__ output,
    int N, int C, int D_in, int H_in, int W_in)
{
    int D_out = D_in / 2;
    int H_out = H_in / 2;
    int W_out = W_in / 2;
    int total = N * C * D_out * H_out * W_out;
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    if (idx < total) {
        int w = idx % W_out;
        int tmp = idx / W_out;
        int h = tmp % H_out;
        tmp = tmp / H_out;
        int d = tmp % D_out;
        tmp = tmp / D_out;
        int c = tmp % C;
        int n = tmp / C;

        float sum_val = 0.0f;
        // Accumulate values in 2x2x2 region, multiply each by scale1
        for (int zd = 0; zd < 2; zd++) {
            for (int zh = 0; zh < 2; zh++) {
                for (int zw = 0; zw < 2; zw++) {
                    int in_d = d * 2 + zd;
                    int in_h = h * 2 + zh;
                    int in_w = w * 2 + zw;
                    int input_idx = ((n * C + c) * D_in + in_d) * H_in * W_in
                                    + in_h * W_in
                                    + in_w;
                    sum_val += input[input_idx] * scale1;
                }
            }
        }
        // Average
        sum_val /= 8.0f;
        // Add bias
        sum_val += bias[c];
        // Multiply by scale2
        sum_val *= scale2;

        // Store result
        int out_idx = ((n * C + c) * D_out + d) * H_out * W_out
                      + h * W_out
                      + w;
        output[out_idx] = sum_val;
    }
}

torch::Tensor fused_ops(
    torch::Tensor input,
    torch::Tensor bias,
    float scale1,
    float scale2)
{
    auto sizes = input.sizes();
    int N = sizes[0];
    int C = sizes[1];
    int D_in = sizes[2];
    int H_in = sizes[3];
    int W_in = sizes[4];

    int D_out = D_in / 2;
    int H_out = H_in / 2;
    int W_out = W_in / 2;

    auto out = torch::zeros({N, C, D_out, H_out, W_out},
                            torch::TensorOptions().dtype(input.dtype()).device(input.device()));

    int total = N * C * D_out * H_out * W_out;
    const int block_size = 256;
    const int grid_size = (total + block_size - 1) / block_size;

    fused_ops_kernel<<<grid_size, block_size>>>(
        input.data_ptr<float>(),
        bias.data_ptr<float>(),
        scale1,
        scale2,
        out.data_ptr<float>(),
        N, C, D_in, H_in, W_in
    );

    return out;
}
"""

cpp_src = r"""
torch::Tensor fused_ops(
    torch::Tensor input,
    torch::Tensor bias,
    float scale1,
    float scale2
);
"""

# Compile/fuse the CUDA kernel
fused_ops_module = load_inline(
    name="fused_ops_module",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["fused_ops"],
    verbose=False
)

class ModelNew(nn.Module):
    """
    Optimized model that maintains the conv_transpose in PyTorch
    and fuses scale, average pooling, bias addition, and another scale into one CUDA kernel.
    """
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, scale1, scale2, bias_shape):
        super(ModelNew, self).__init__()
        self.conv_transpose = nn.ConvTranspose3d(
            in_channels, out_channels, kernel_size,
            stride=stride, padding=padding
        )
        self.bias = nn.Parameter(torch.randn(bias_shape))
        self.scale1 = nn.Parameter(torch.tensor(scale1))
        self.scale2 = nn.Parameter(torch.tensor(scale2))

    def forward(self, x):
        x = self.conv_transpose(x)
        # Single fused step applying scale1, 3D avg pooling (kernel=2, stride=2), bias, and scale2
        return fused_ops_module.fused_ops(
            x,
            self.bias,
            float(self.scale1.item()),
            float(self.scale2.item())
        )
```