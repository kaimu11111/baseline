```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

source = r'''
#include <torch/extension.h>
#include <cuda_runtime.h>
#include <vector>
#include <cmath>

// Fused kernel that performs:
// 1) Linear operation: out[i,j] = sum_{k=0..in_features-1}(x[i,k]*weight[j,k]) + bias[j]
// 2) Sums the result across the out_features dimension
// 3) The subsequent max, mean, logsumexp calls for a single scalar per row all yield
//    the same value, so the final result is that single scalar.
__global__ void fused_linear_ops_kernel(
    const float* __restrict__ x,
    const float* __restrict__ weight,
    const float* __restrict__ bias,
    float* __restrict__ out,
    int batch_size,
    int in_features,
    int out_features
)
{
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < batch_size) {
        float sumVal = 0.0f;
        // Compute linear + sum across out_features
        for (int j = 0; j < out_features; j++) {
            float temp = bias[j];
            // MatMul over in_features
            for (int k = 0; k < in_features; k++) {
                temp += x[row * in_features + k] * weight[j * in_features + k];
            }
            // Accumulate
            sumVal += temp;
        }
        // For a single scalar, subsequent max, mean, logsumexp calls
        // all yield the same sumVal
        out[row] = sumVal;
    }
}

torch::Tensor fused_linear_ops_cuda(
    torch::Tensor x,
    torch::Tensor weight,
    torch::Tensor bias
) {
    // x shape: (batch_size, in_features)
    // weight shape: (out_features, in_features)
    // bias shape: (out_features)
    int batch_size = x.size(0);
    int in_features = x.size(1);
    int out_features = weight.size(0);

    auto out_options = torch::TensorOptions().dtype(x.dtype()).device(x.device());
    auto out = torch::empty({batch_size}, out_options);

    int block_size = 256;
    int grid_size = (batch_size + block_size - 1) / block_size;

    fused_linear_ops_kernel<<<grid_size, block_size>>>(
        x.data_ptr<float>(),
        weight.data_ptr<float>(),
        bias.data_ptr<float>(),
        out.data_ptr<float>(),
        batch_size,
        in_features,
        out_features
    );

    return out.view({batch_size, 1});
}
''';

cpp_src = r'''
torch::Tensor fused_linear_ops_cuda(
    torch::Tensor x,
    torch::Tensor weight,
    torch::Tensor bias
);
''';

# Build/Load the fused kernel
fused_linear_ops = load_inline(
    name="fused_linear_ops",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["fused_linear_ops_cuda"],
    verbose=False
)

class ModelNew(nn.Module):
    """
    Optimized Model that fuses:
      - Linear layer
      - sum across output dimension
      - subsequent max, mean, logsumexp calls
    into a single custom CUDA kernel.
    """
    def __init__(self, in_features, out_features):
        super().__init__()
        # We replicate the Linear layer parameters manually
        self.weight = nn.Parameter(torch.empty(out_features, in_features))
        self.bias = nn.Parameter(torch.empty(out_features))
        nn.init.kaiming_uniform_(self.weight, a=5**0.5)
        nn.init.zeros_(self.bias)

    def forward(self, x):
        # Calls our fused custom kernel
        return fused_linear_ops.fused_linear_ops_cuda(x, self.weight, self.bias)
```
