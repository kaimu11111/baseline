```python
import torch
import torch.nn as nn
from torch.utils.cpp_extension import load_inline

# Fused HardSwish + ReLU custom CUDA kernel
source = r"""
#include <torch/extension.h>
#include <cuda_runtime.h>

__global__ void fused_hardswish_relu_kernel(const float* in, float* out, int size) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < size) {
        float val = in[idx];
        float r = 0.0f;
        if (val <= -3.0f) {
            r = 0.0f;
        } else if (val >= 3.0f) {
            r = val;
        } else {
            float t = val * (val + 3.0f) / 6.0f;
            r = t > 0.0f ? t : 0.0f;
        }
        out[idx] = r;
    }
}

torch::Tensor fused_hardswish_relu_cuda(torch::Tensor input) {
    auto size = input.numel();
    auto out = torch::zeros_like(input);

    const int block_size = 256;
    const int grid_size = (size + block_size - 1) / block_size;

    fused_hardswish_relu_kernel<<<grid_size, block_size>>>(input.data_ptr<float>(), 
                                                           out.data_ptr<float>(), 
                                                           size);
    return out;
}
"""

cpp_src = r"""
torch::Tensor fused_hardswish_relu_cuda(torch::Tensor input);
"""

# Build/Load the fused kernel
fused_hardswish_relu = load_inline(
    name="fused_hardswish_relu",
    cpp_sources=cpp_src,
    cuda_sources=source,
    functions=["fused_hardswish_relu_cuda"],
    verbose=False,
    extra_cflags=[""],
    extra_ldflags=[""],
)

class ModelNew(nn.Module):
    """
    Optimized model that keeps PyTorch convolution, then applies fused HardSwish+ReLU.
    """
    def __init__(self, in_channels, out_channels, kernel_size):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.fused_hardswish_relu = fused_hardswish_relu

    def forward(self, x):
        x = self.conv(x)
        x = self.fused_hardswish_relu.fused_hardswish_relu_cuda(x)
        return x

batch_size = 128
in_channels = 8
out_channels = 64
height, width = 128, 128
kernel_size = 3

def get_inputs():
    return [torch.rand(batch_size, in_channels, height, width).cuda()]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size]
```